#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 7.4
#  in conjunction with Tcl version 8.6
#    Jun 08, 2022 12:30:34 AM BST  platform: Windows NT
#    Jun 08, 2022 12:38:28 AM BST  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
from tkinter.filedialog import asksaveasfilename
from pprint import pprint
import time
import json

import pandas as pd

import IP_analyser
import ip_apis

def main(*args):
    '''Main entry point for the application.'''
    global root
    root = tk.Tk()
    root.protocol( 'WM_DELETE_WINDOW' , root.destroy)
    # Creates a toplevel widget.
    global _top1, _w1
    _top1 = root
    _w1 = IP_analyser.Toplevel1(_top1)
    root.iconbitmap("icon.ico")
    root.ip_data = []
    root.mainloop()

def print(*args):
    print('IP_analyser_support.print')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()
    
def analyse_button(text, button, tab, treeview, treeview2, treeview3):
    ip_list = text.get("1.0", tk.END)
    ip_list = ip_list.split('\n')
    while '' in ip_list:
        ip_list.remove('')
    
    ip_list = [ip.replace("[.]", ".") for ip in ip_list]
    
    # Get VirusTotal data.
    treeview.delete(*treeview.get_children()) 
    vt_queued_domains = ip_apis.vt_domain_scan(ip_list)
    time.sleep(1) 
    vt_domain_report = ip_apis.vt_results(vt_queued_domains)
    root.ip_data.append(vt_domain_report)
    
    index = 0
    for result in vt_domain_report:
        if 'resource' in result:
            treeview.insert('', "end", str(index), text=result['resource'], values=("{}/{}".format(result['positives'], result['total'])))
        for scan in result['scans']:
            # Create tag for colouring purposes.
            tag = None
            if result['scans'][scan]['detected']:
                tag = 'red'
            else:
                tag = 'green'
            treeview.insert(str(index), "end", tags=(tag), text=scan, values=(str(result['scans'][scan]['detected'])))
        index += 1
    treeview.tag_configure('red', background="#ff867d")
    treeview.tag_configure('green', background="#a4ff91")

    tab.tab(1, state="normal")

    # Get ipinfo data.
    treeview2.delete(*treeview2.get_children())

    ipinfo_data = ip_apis.ipinfo_results(ip_list)
    root.ip_data.append(ipinfo_data)
    index = 0
    for result in ipinfo_data:
        if 'ip' in result:
            treeview2.insert('', "end", str(index), text=result['ip'], values=(result['country']))
            for key in result:
                if key != 'ip':
                    treeview2.insert(str(index), "end", text="{}".format(key.title()), values=("{}".format(result[key])))
            index += 1

    tab.tab(2, state="normal")

    # Get vpnapi data.
    treeview3.delete(*treeview3.get_children())

    vpnapi_data = ip_apis.vpnapi_results(ip_list)
    root.ip_data.append(vpnapi_data)
    index = 0
    tag = None
    for result in vpnapi_data:
        if 'security' in result:
            sec_value = None
            for value in result['security']:
                if result['security'][value] is True:
                    tag = 'yellow'
                    sec_value = str(value)
            if tag is not None:
                treeview3.insert('', "end", str(index), tags=(tag), text=result['ip'], values=(sec_value.title()))
                tag = None
            else:
                treeview3.insert('', "end", str(index), text=result['ip'])
            for key in result:
                if key != 'ip':
                    for subkey in result[key]:
                        treeview3.insert(str(index), "end", text="{}".format(subkey.title()), values=("{}".format(result[key][subkey])))
            index += 1
    treeview3.tag_configure('yellow', background="#ebef70")        
    
    tab.tab(3, state="normal")
    button.configure(state="normal")

def export_button():
    file_name = asksaveasfilename(confirmoverwrite=True, defaultextension=".xlsx", filetypes=(("Excel file", "*.xlsx"),("All Files", "*.*")))
    if file_name:
        sheet_index = 1
        for sheet in root.ip_data:
            sheet_data = pd.DataFrame()
            for ip in sheet:
                df = pd.json_normalize(ip)
                sheet_data = pd.concat([sheet_data, df], ignore_index=True)
            write_excel(file_name, 'Sheet {}'.format(sheet_index), sheet_data)
            sheet_index += 1

def write_excel(filename,sheetname,dataframe):
    try:
        with pd.ExcelWriter(filename, engine='openpyxl', mode='a', if_sheet_exists="replace") as writer: 
                dataframe.to_excel(writer, sheet_name=sheetname, index=False)
    except:
        with pd.ExcelWriter(filename, engine='openpyxl', mode='w') as writer: 
                dataframe.to_excel(writer, sheet_name=sheetname, index=False)

if __name__ == '__main__':
    IP_analyser.start_up()





